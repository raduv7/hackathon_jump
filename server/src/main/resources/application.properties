spring.application.name=server
server.port=8080

# Include sensitive configuration from secrets.properties
spring.config.import=optional:classpath:secrets.properties

# SQLite Database Configuration
spring.datasource.url=jdbc:sqlite:./src/main/resources/database/meetScribe.sqlite
spring.datasource.driver-class-name=org.sqlite.JDBC
spring.jpa.database-platform=org.hibernate.community.dialect.SQLiteDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=true

# Google OAuth Configuration (non-sensitive parts)
spring.security.oauth2.client.registration.google.scope=openid,profile,email,https://www.googleapis.com/auth/calendar.events.readonly
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com

# LinkedIn OAuth Configuration (non-sensitive parts)
spring.security.oauth2.client.registration.linkedin.scope=openid,profile,email,w_member_social
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/people/~:(id,firstName,lastName,emailAddress)
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id



# JWT Configuration (non-sensitive parts)
app.security.jwt.issuer=meetScribe_server
app.security.jwt.expires-minutes=120

app.frontend.oauth.callback.url=http://localhost:4200/oauth2/callback
app.oauth.google.login.url=/oauth2/authorization/google
app.oauth.linkedin.login.url=/oauth2/authorization/linkedin
app.cors.allowed-origins=http://localhost:4200
