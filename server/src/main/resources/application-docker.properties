# Docker-specific configuration
spring.application.name=server
server.port=8080

# DevTools Configuration - Disable auto-restart in production
spring.devtools.restart.enabled=false

# Include sensitive configuration from secrets.properties
spring.config.import=optional:file:/app/secrets.properties

# SQLite Database Configuration for Docker
spring.datasource.url=jdbc:sqlite:/app/data/meetScribe.sqlite
spring.datasource.driver-class-name=org.sqlite.JDBC
spring.jpa.database-platform=org.hibernate.community.dialect.SQLiteDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.open-in-view=true

# SQLite specific configurations for production
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.datasource.hikari.maximum-pool-size=1
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.leak-detection-threshold=20000

# Logging configuration
logging.level.root=INFO
logging.level.hackathon_jump.server=INFO
logging.file.name=/app/logs/application.log
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Actuator configuration for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true

# Google OAuth Configuration (non-sensitive parts)
spring.security.oauth2.client.registration.google.scope=openid,profile,email,https://www.googleapis.com/auth/calendar.readonly
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com

# LinkedIn OAuth Configuration (non-sensitive parts)
spring.security.oauth2.client.registration.linkedin.scope=openid,profile,email,w_member_social
spring.security.oauth2.client.registration.linkedin.user-name-attribute=sub
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/userinfo
spring.security.oauth2.client.provider.linkedin.jwk-set-uri=https://www.linkedin.com/oauth/openid/jwks

# Facebook registration
spring.security.oauth2.client.registration.facebook.client-name=Facebook
spring.security.oauth2.client.registration.facebook.scope=public_profile,email

# Facebook provider (v23)
spring.security.oauth2.client.provider.facebook.authorization-uri=https://www.facebook.com/v23.0/dialog/oauth
spring.security.oauth2.client.provider.facebook.token-uri=https://graph.facebook.com/v23.0/oauth/access_token
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/v23.0/me?fields=id,name,email,picture
spring.security.oauth2.client.provider.facebook.user-name-attribute=id

# JWT Configuration (non-sensitive parts)
app.security.jwt.issuer=meetScribe_server
app.security.jwt.expires-minutes=120

# Recall AI Configuration
app.recall.api-base-url=https://us-east-1.recall.ai/api/v1/bot/

# OpenAI Configuration
app.openai.api-base-url=https://api.openai.com

# LinkedIn API Configuration
app.linkedin.api-base-url=https://api.linkedin.com/v2

# OAuth URLs (will be overridden by environment variables)
app.frontend.oauth.callback.url=${app.frontend-url}/oauth2/callback
app.oauth.google.login.url=/oauth2/authorization/google
app.oauth.linkedin.login.url=/oauth2/authorization/linkedin
app.oauth.facebook.login.url=/oauth2/authorization/facebook
app.cors.allowed-origins=${app.cors.allowed-origins:${app.frontend-url}}
